
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserRole {
    USER
    ADMIN
}

model User {
  id          Int      @id @default(autoincrement())
  
  fullName    String?
  email       String   @unique
  password    String
  role        UserRole @default(USER)
  verified    DateTime?

  // which provider (Google and so on) was used to login
  // in case using Credentials (login and password) a provider will be null 
  provider    String?
  providerId  String?

  cart        Cart?
  orders      Order[]
  verificationCode VerificationCode?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("users")
}

// Products category
model Category {
  id          Int      @id @default(autoincrement())
  
  name        String   @unique
  products    Product[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("categories")
}


model Product {
  id          Int @id @default(autoincrement())
  
  name        String
  imageUrl    String

  ingredients Ingredient[]
  
  options     ProductOption[]
  
  categoryId  Int 
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("products")
}

// Product options
model ProductOption {
  id          Int @id @default(autoincrement())

  // size -> 20 - small, 30 - medium, 35 - large
  pizzaSize   Int?
  // pizzaType -> 1 - classic crust, 2 - thin crust
  pizzaType   Int?

  price       Int

  productId   Int
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)  

  cartItems   CartItem[]

  @@map("product_options")
}

// Product ingredients
model Ingredient {
  id          Int      @id @default(autoincrement())
  
  name        String   @unique
  price       Int
  imageUrl    String
  
  products    Product[]

  cartItems   CartItem[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ingredients")
}


model Cart {
    id          Int   @id @default(autoincrement())

    userId      Int?   @unique
    user        User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

    items       CartItem[]

    token       String

    totalAmount Int @default(0)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("carts")
}

// products in the cart
model CartItem {
  id                Int @id @default(autoincrement())
  
  cartId            Int
  cart              Cart @relation(fields: [cartId], references: [id], onDelete: Cascade)

  productOptionId   Int
  productOption     ProductOption @relation(fields: [productOptionId], references: [id], onDelete: Cascade)

  quantity          Int @default(1)

  ingredients       Ingredient[]

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("cart_items")
}

enum OrderStatus {
  PENDING    // Pending - an order created but not paid yet
  SUCCEEDED   // Succeeded - an order has been paid
  CANCELLED   // Cancelled - an order has been cancelled
}

// User's order
model Order {
    id           Int @id @default(autoincrement())

    userId       Int?
    user         User? @relation(fields: [userId], references: [id], onDelete: Cascade)

    token        String

    sum          Int
    status       OrderStatus
    paymentId    String?

    // list of ordered products
    items        Json
    
    // order delivery details
    fullName     String
    email        String
    phone        String
    address      String
    comment      String?

    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@map("orders")
}

model VerificationCode {
    id           Int @id @default(autoincrement())

    userId       Int  @unique
    user         User @relation(fields: [userId], references: [id], onDelete: Cascade)

    code         String

    createdAt    DateTime @default(now())

    @@unique([userId, code])
    @@map("verification_codes")
}

